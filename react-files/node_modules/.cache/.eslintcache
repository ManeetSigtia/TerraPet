[{"/Users/hari_rathod/TerraPet/react-files/src/index.js":"1","/Users/hari_rathod/TerraPet/react-files/src/App.js":"2","/Users/hari_rathod/TerraPet/react-files/src/components/Images.js":"3","/Users/hari_rathod/TerraPet/react-files/src/components/DailyData.js":"4"},{"size":469,"mtime":1677705135822,"results":"5","hashOfConfig":"6"},{"size":5007,"mtime":1677712512846,"results":"7","hashOfConfig":"6"},{"size":600,"mtime":1677705135804,"results":"8","hashOfConfig":"6"},{"size":630,"mtime":1677705135803,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r4qgdc",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hari_rathod/TerraPet/react-files/src/index.js",[],[],"/Users/hari_rathod/TerraPet/react-files/src/App.js",["24"],[],"import './App.css';\nimport { Component } from 'react';\nimport uniqid from 'uniqid';\nimport DailyData from './components/DailyData';\nimport Images from './components/Images';\nimport jsonData from \"./data.json\";\n\nclass App extends Component {\n  buttonPressed = \"\";\n  constructor() {\n    super();\n    this.state = {\n      steps: 0,\n      activity: 0,\n      id: uniqid(),\n      date: this.getCurrentDate(),\n      dailyData: [],\n    }\n    // Bind functions to this App class\n    this.handleStepsChange = this.handleStepsChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeTask = this.removeTask.bind(this);\n    this.getTotalSteps = this.getTotalSteps.bind(this);\n    this.handleActivityChange = this.handleActivityChange.bind(this);\n    this.updateImages = this.updateImages.bind(this);\n    this.getCurrentDate = this.getCurrentDate.bind(this);\n    this.setButtonPressed = this.setButtonPressed.bind(this);\n  }\n\n  \n  handleStepsChange(event) {\n    this.setState({\n      steps: event.target.value,\n      id: this.state.id,\n    });\n  }\n\n  getCurrentDate() {\n    var today = new Date();\n    var dd = String(today.getDate()).padStart(2, '0');\n    var mm = String(today.getMonth() + 1).padStart(2, '0');\n    var yyyy = today.getFullYear();\n    today = dd + '/' + mm + '/' + yyyy;\n    return today;\n  }\n\n  handleActivityChange(event) {\n    this.setState({\n      activity: event.target.value,\n    });\n  }\n\n\n  handleSubmit(event) {\nconsole.log(this.buttonPressed);\n    console.log(this.state);\n    event.preventDefault();\n    if(this.buttonPressed === 'manual') {\n    let contains = false;\n    this.state.dailyData.forEach(x => {\n      if(x.date === this.state.date) contains = true;\n    });\n    if(/* !contains && this.state.date !== 'error'*/ true) {\n      let day = { steps: this.state.steps, activity: this.state.activity, id: this.state.id, date: this.state.date }\n      this.setState({\n        id: uniqid(),\n        date: this.getCurrentDate(),\n        dailyData: [ ...this.state.dailyData, day]\n      });\n    }\n  }\n  else if(this.buttonPressed === 'json') {\n    if(/* !contains && this.state.date !== 'error */ true) {\n      let day = { steps: JSON.parse(JSON.stringify(jsonData)).steps_walked, activity: JSON.parse(JSON.stringify(jsonData)).activity_seconds, id: this.state.id, date: this.getCurrentDate() }\n      this.setState({\n        steps: 0,\n        activity: 0,\n        id: uniqid(),\n        date: this.getCurrentDate(),\n        dailyData: [ ...this.state.dailyData, day]\n      });\n    }\n  }\n}\n\n  removeTask(event) {\n    let arrayTemp = this.state.dailyData;\n    let index;\n    arrayTemp.forEach(x => {\n      if(x.id === event.target.id) {\n        index = arrayTemp.indexOf(x);\n      }\n    });\n    arrayTemp.splice(index, 1);\n    this.setState({\n      dailyData: arrayTemp,\n    });\n  }\n\n  getTotalSteps(event) {\n    let total = 0;\n    this.state.dailyData.forEach(x => {\n      total = parseInt(total) + parseInt(x.steps);\n    });\n    return total;\n  }\n  // update the images depending on how many steps a person has\n  updateImages(event) {\n    let value = 0;\n\n    if(this.getTotalSteps() >= 0 && this.getTotalSteps() < 10000) value = 0;\n    else if(this.getTotalSteps() >= 10000 && this.getTotalSteps() < 20000) value = 1;\n    else if(this.getTotalSteps() >= 20000 && this.getTotalSteps() < 30000) value = 2;\n    else if (this.getTotalSteps() >= 30000 && this.getTotalSteps() < 40000) value = 3;\n    else if (this.getTotalSteps() >= 40000) value = 4;\n\n    return value;\n  }\n\n  setButtonPressed(event) {\n    if(event.target.id === 'manual') {\n      this.buttonPressed = 'manual';\n    }\n    else if (event.target.id === 'json') {\n      this.buttonPressed = 'json';\n    }\n  }\n\n  \n  render() {\n    const {dailyData} = this.state;\n\n    return (\n      <div className=\"App\">\n\n      <div className=\"Rewards\">\n        <h2>Pet Status</h2>\n        <Images imageValue={this.updateImages()}/></div>\n        <div className=\"Health-display\">\n        \n          <h2>Your Health Data</h2>\n          \n          <form className=\"App-form\" onSubmit={ this.handleSubmit }>\n            <label className=\"App-label\" htmlFor=\"count\">Manually add your activity here: </label>\n            <input className=\"App-input\" type=\"number\" id=\"count\" name=\"count\" onChange={ this.handleStepsChange } placeholder=\"Step Count\"/>\n            <input className=\"App-input\" type=\"number\" id=\"minutes\" name=\"minutes\" onChange={ this.handleActivityChange } placeholder=\"Activity in seconds\"/>\n            <button className=\"App-submit\" id=\"manual\" type=\"submit\" onClick={this.setButtonPressed}>Add Daily Data Manually</button>\n            <button className=\"App-submit\" id=\"json\" onClick={this.setButtonPressed}>Upload Data from 'Fitness Device'</button>\n            \n          </form>\n          <div className=\"App-total-steps\">Your Total Step Count: {this.getTotalSteps()}</div>\n          <DailyData remove={this.removeTask} dailyData={dailyData}/>\n        </div>\n      </div>\n    );\n }\n}\n\nexport default App;","/Users/hari_rathod/TerraPet/react-files/src/components/Images.js",["25","26","27","28","29"],[],"import { Component } from 'react';\n\nclass Images extends Component {\n    render() {\n        const { imageValue } = this.props;\n        if (imageValue ===  0) return ( <img src={require(\"../imageOne.jpg\")}></img>)\n        else if (imageValue === 1) return ( <img src={require(\"../1_img2.png\")}></img> )\n        else if (imageValue === 2) return ( <img src={require(\"../1_img3.png\")}></img> )\n        else if (imageValue === 3) return ( <img src={require(\"../1_img4.png\")}></img> )\n        else if (imageValue === 4) return ( <img src={require(\"../1_img5.png\")}></img> )\n    }\n}\n\nexport default Images;","/Users/hari_rathod/TerraPet/react-files/src/components/DailyData.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":59,"column":9,"nodeType":"32","messageId":"33","endLine":59,"endColumn":17},{"ruleId":"34","severity":1,"message":"35","line":6,"column":41,"nodeType":"36","endLine":6,"endColumn":79},{"ruleId":"34","severity":1,"message":"35","line":7,"column":45,"nodeType":"36","endLine":7,"endColumn":81},{"ruleId":"34","severity":1,"message":"35","line":8,"column":45,"nodeType":"36","endLine":8,"endColumn":81},{"ruleId":"34","severity":1,"message":"35","line":9,"column":45,"nodeType":"36","endLine":9,"endColumn":81},{"ruleId":"34","severity":1,"message":"35","line":10,"column":45,"nodeType":"36","endLine":10,"endColumn":81},"no-unused-vars","'contains' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]